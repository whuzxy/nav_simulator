
<launch>
 <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- gazebo -->
<include file="$(find gazebo_ros)/launch/empty_world.launch"> 
    <arg name="verbose" value="true"/>
    <!-- <arg name="world_name" value="$(find car_sim)/worlds/my.world"/> -->
    <arg name="world_name" value="$(find car_sim)/worlds/my.world"/>
  </include>
  <arg name="model" default="$(find car_sim)/urdf/diff_wheeled_robot.xacro" />
	<param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />

  <!-- Run a python script to send a service call the gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -x 3 -y -12 -z 0.5 -model robot -param robot_description"/>	

	<!-- Starting Joint state publisher node which will publish the joint values -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<!-- Starting robot state publish which will publish tf -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <!-- gazebo -->


<!--<remap from="base_scan" to="scan" />-->
  <node name="map_server_3d" pkg="map_server_3d" type="map_server_3d" args="$(find car_sim)/maps/map.yaml" output="screen"/>

<node pkg="fake_localization" type="fake_localization" name="fake_localization">
    <!-- <remap from="base_pose_ground_truth" to="/prius/base_pose_ground_truth"/> -->
  </node>
  <node pkg="tf2_ros" type="static_transform_publisher" name="very_inaccurate_odom" args="0 0 0 0 0 0 odom base_link"  output="screen"/>
  
  <!--
  <node pkg="tf" type="static_transform_publisher" name="tf1" args="0 0 0 0 0 0 /map /odom 100"/>-->
  



	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find car_sim)/nav3d.rviz" required="true" />


	

       
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
  	<!--<param name="base_global_planner" value="global_planner/GlobalPlanner"/>
 	<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/> 
 	<param name="heading_scoring" type="bool"  value="true"/>-->
    <param name="controller_frequency" value="10.0"/>
    <param name="controller_patiente" value="0.0"/>
    
    <rosparam file="$(find car_sim)/config3d/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find car_sim)/config3d/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find car_sim)/config3d/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find car_sim)/config3d/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find car_sim)/config3d/base_local_planner_params.yaml" command="load" />
    
    
  </node>

</launch>
